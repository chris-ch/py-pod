"""
Toolbox for projecting onto straight lines.
"""
import logging

_logger = logging.getLogger('vecspace')

from mathtools import vadd
from mathtools import vsub
from mathtools import sum_product
from mathtools import scale

class StraightLine(object):
  """
  """
  
  def __init__(self, point):
    """
    """
    self.point = point
    
  def project(self, point):
    """
    """
    subspace = VectorSubspace(self.point)
    proj = subspace.project(vsub(point, self.point))
    proj.projected = vadd(proj.projected, self.point)
    return proj
    
  def __repr__(self):
    out = str(self.points) 
    return out

class VectorSubspace(object):
  """
  Defines a set on which we can project a point.
  """
  
  def __init__(self, point):
    """
    Defining a n-subspace generated by n points.
    """
    self.def_point = point

  def project(self, point):
    """
    """
    
    m_value = sum_product(self.def_point, self.def_point)
    b_value = sum_product(point, self.def_point)
    alpha = b_value / m_value
    
    component = scale(alpha, self.def_point)
    
    return Projection(component, point)
    
class Projection(object):
  """
  Simple container gathering details about projection.
  """
  def __init__(self, projected, start):
    self.projected = projected
    self.start = start
    self.projector = vsub(projected, start)
    
    
